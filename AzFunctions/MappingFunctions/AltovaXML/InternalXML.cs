/**
 * InternalXML.cs
 *
 * This file was generated by MapForce 2021r3.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */

using System.Xml;
using System.Collections;
using Altova.TypeInfo;

using System.Text;

using Altova.Mapforce;


namespace Altova.Xml
{
	public abstract class InternalXML
	{
		public static string XMLToString( Altova.Mapforce.IMFNode element )
		{
			XmlDocument doc = new XmlDocument();
			MFDomWriter.Write(element.Select(Altova.Mapforce.MFQueryKind.SelfByQName, new XmlQualifiedName(element.LocalName, element.NamespaceURI)), doc);
			return XmlTreeOperations.SaveXml(doc, false, true);
		}
		

		public static IMFNode XMLFromString( string xmlString )
		{
			return new DOMNodeAsMFNodeAdapter(XmlTreeOperations.LoadXml( xmlString ));
		}
		
		public static string XMLToGroupingKey(Altova.Mapforce.IMFNode node)
		{
			StringBuilder sBuf = new StringBuilder();
			Write(new Altova.Mapforce.MFSingletonSequence(node), sBuf);
			return sBuf.ToString();
		}
		
		public static string XMLToGroupingKey(IEnumerable e)
		{
			StringBuilder sBuf = new StringBuilder();
			Write(e, sBuf);
			return sBuf.ToString();
		}

		private static string GetValueFromChildren(Altova.Mapforce.IMFNode node)
		{
			string result = "";
			foreach (object o in node.Select(MFQueryKind.AllChildren, null))
			{
				result += GetValue(o);
			}
			return result;
		}

		private static string GetValue(object o)
		{
			if (o is Altova.Mapforce.IMFNode)
			{
				return GetValueFromChildren((Altova.Mapforce.IMFNode)o);
			}
			else if (o is Altova.Types.QName)
			{
				Altova.Types.QName q = (Altova.Types.QName)o;
				return "{" + q.Uri + "}" + q.LocalName;
			}
			else
				return o.ToString();
		}


		private static void Write(IEnumerable what, System.Text.StringBuilder sBuf)
		{
			foreach (object o in what)
			{
				if (o is Altova.Mapforce.IMFNode)
				{
					Altova.Mapforce.IMFNode el = (Altova.Mapforce.IMFNode)o;
					if ((el.NodeKind & Altova.Mapforce.MFNodeKind.Element) != 0)
					{
						sBuf.Append("<{" + el.NamespaceURI + "}" + el.LocalName);
						WriteAttributes(el.Select(Altova.Mapforce.MFQueryKind.AllAttributes, null), sBuf);
						sBuf.Append(">");
						Write(el.Select(Altova.Mapforce.MFQueryKind.AllChildren, null), sBuf);
						sBuf.Append("</{" + el.NamespaceURI + "}" + el.LocalName + ">");
					}
					else if ((el.NodeKind & Altova.Mapforce.MFNodeKind.Attribute) != 0)
					{
						//done by WriteAttributes
					}
					else if ((el.NodeKind & Altova.Mapforce.MFNodeKind.Comment) != 0)
					{
						//ignored
					}
					else if ((el.NodeKind & Altova.Mapforce.MFNodeKind.ProcessingInstruction) != 0)
					{
						//ignored
					}
					else if ((el.NodeKind & Altova.Mapforce.MFNodeKind.Text) != 0)
					{
						string s = GetValue(el);// MFDomWriter.GetValue(el, null);
						sBuf.Append(s);
					}
				}
				else
				{
					sBuf.Append(GetValue(o));//MFDomWriter.GetValue(o, null));
				}
			}
		}
		
		private class NodeCompare : IComparer
		{
			public System.Int32 Compare(System.Object pFirstObject, System.Object pObjectToCompare)
			{
				if(pFirstObject is IMFNode)
				{
					string key1 = ((IMFNode)pFirstObject).NamespaceURI + ((IMFNode)pFirstObject).LocalName;
					string key2 = ((IMFNode)pObjectToCompare).NamespaceURI + ((IMFNode)pObjectToCompare).LocalName;
					return string.Compare(key1,key2);
				}
				else
					return 0;
			}
		}

		private static void WriteAttributes( IEnumerable what, System.Text.StringBuilder sBuf)
		{
			ArrayList arrAttributes = new ArrayList( );
			foreach (object o in what)
			{
				Altova.Mapforce.IMFNode el = (Altova.Mapforce.IMFNode)o;
				arrAttributes.Add(el);
			}

			arrAttributes.Sort(new NodeCompare());

			foreach( IMFNode el in arrAttributes)
			{
				if( !el.LocalName.Equals( "xmlns") && !el.NamespaceURI.Equals("http://www.w3.org/2000/xmlns/"))
				{
					sBuf.Append( " {" + el.NamespaceURI + "}");
					sBuf.Append( el.LocalName + "=\"" + MFDomWriter.GetValue(el, null) + "\"");
				}
			}
		}

		public static byte[] XMLToBase64Binary( Altova.Mapforce.IMFNode element, string encoding, string byteorder, bool bBOM )
		{
			XmlDocument doc = new XmlDocument();
			MFDomWriter.Write(element.Select(Altova.Mapforce.MFQueryKind.SelfByQName, new XmlQualifiedName(element.LocalName, element.NamespaceURI)), doc);

			return XmlTreeOperations.SaveXmlBinary(doc, encoding, System.String.Compare(byteorder, "big endian", true) == 0, bBOM, false);
		}
		
		public static IMFNode XMLFromBase64Binary( byte[] xmlString )
		{
			return new DOMNodeAsMFNodeAdapter(XmlTreeOperations.LoadXmlBinary(xmlString));
		}
		
		public static void ThrowException( string exception )
		{
			throw new System.Exception(exception);
		}
		

		public static Altova.Mapforce.IMFNode CallWebservice(
			Altova.Mapforce.IMFNode node,
			string service,
			string operation,
			Altova.Types.QName wsdl_operation,
			string soap_action,
			string connection_endpoint,
			string call_style,
			string username,
			string password,
			int timeout,
			string http_location,
			string input_style,
			int soapVersion
			)
		{
			WebServiceCall call;
			switch (call_style)
			{
				case "rpc":
				case "document":
					call = new WebServiceCall(connection_endpoint, wsdl_operation.Uri, operation, soap_action, "utf-8",
						call_style == "rpc"
						? WebServiceCall.CallStyle.SOAP_RPC_ENCODED
						: WebServiceCall.CallStyle.SOAP_DOCUMENT_LITERAL,
						soapVersion == 1 ? WebServiceCall.SoapVersion.SOAP11 : WebServiceCall.SoapVersion.SOAP12);
					break;
				case "get":
				case "post":
					call = new WebServiceCall(connection_endpoint, http_location,
						input_style == "url-encoded" ? WebServiceCall.HttpContentType.HTTP_URL_ENCODED
						: input_style == "url-replacement" ? WebServiceCall.HttpContentType.HTTP_URL_REPLACEMENT
						: WebServiceCall.HttpContentType.HTTP_XML,
						"utf-8",
						call_style == "get" ? WebServiceCall.CallStyle.HTTP_GET : WebServiceCall.CallStyle.HTTP_POST
						);
					break;
				default:
					throw new System.InvalidOperationException("Unexpected call type.");
			}
			call.SetCredentials(username, password);
			XmlDocument doc = new XmlDocument();
			Altova.Mapforce.MFDomWriter.Write(node.Select(Altova.Mapforce.MFQueryKind.SelfByQName, new XmlQualifiedName(node.LocalName, node.NamespaceURI)), doc);
			return new Altova.Mapforce.DOMNodeAsMFNodeAdapter(call.call(doc));
		}

		public static void ThrowWebserviceFault( string faultName, string message, Altova.Mapforce.IMFNode detail )
		{
			XmlDocument faultDoc = new XmlDocument();
			Altova.Mapforce.MFDomWriter.Write( detail.Select(MFQueryKind.AllChildren, null), faultDoc );
			throw new Altova.Xml.FaultException(faultDoc, message);
		}

	}
}

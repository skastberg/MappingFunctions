//
// WebServiceCall.cs
//
// This file was generated by MapForce 2021r3.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//

using System;
using System.Text;
using System.Xml;
using System.Net;
using System.Web;
using System.IO;

namespace Altova.Xml
{
	public class WebServiceCall
	{
		public enum CallStyle { UNKNOWN = 0, SOAP_RPC_ENCODED = 1, SOAP_DOCUMENT_LITERAL = 2, HTTP_GET = 3, HTTP_POST = 4 }
		public enum HttpContentType { UNKNOWN = 0, HTTP_URL_ENCODED = 1, HTTP_URL_REPLACEMENT = 2, HTTP_XML = 3 }
		public enum SoapVersion { SOAP11 = 1, SOAP12 = 2}
		private readonly string endpointURL;
		private readonly string soapAction;
		private readonly string encoding;
		private readonly string operationName;
		private readonly string operationLocation;
		private readonly string WSDLTargetNamespace;
		private readonly CallStyle style;
		private readonly HttpContentType contentType;
		private readonly SoapVersion soapVersion;
		private readonly string soapEnvNs = "http://schemas.xmlsoap.org/soap/envelope/";
		private string username = "";
		private string password = "";


		public WebServiceCall(string endpointURL, string WSDLTargetNamespace, string operationName, string soapAction, string encoding, CallStyle style, SoapVersion soapVersion)
		{
			this.endpointURL = endpointURL;
			this.soapAction = soapAction;
			this.encoding = encoding;
			this.WSDLTargetNamespace = WSDLTargetNamespace;
			this.operationName = operationName;
			this.style = style;
			this.soapVersion = soapVersion;
			if (soapVersion == SoapVersion.SOAP12)
			{
				soapEnvNs = "http://www.w3.org/2003/05/soap-envelope";
			}
		}

		public WebServiceCall(string endpointURL, string opLocation, HttpContentType contentType, string encoding, CallStyle style)
		{
			this.endpointURL = endpointURL;
			this.operationLocation = opLocation;
			this.contentType = contentType;
			this.encoding = encoding;
			this.style = style;
		}

		public void SetCredentials(string u, string p)
		{
			username = u;
			password = p;
		}

		public XmlNode call(XmlNode input)
		{
			XmlNode node = input;
			
			if (style == CallStyle.HTTP_GET || style == CallStyle.HTTP_POST)
			{
				node = input.FirstChild;
				HttpWebRequest conn = null;

				string urlOperation = endpointURL + operationLocation;
				string parameters = "";
				
				if (node != null)
				{
					if (contentType == HttpContentType.HTTP_XML && style == CallStyle.HTTP_POST)
					{
						if (node.ChildNodes.Count > 1)
							throw new Exception ("HTTP POST with text/xml encoding can handle only one part");
						
							System.IO.StringWriter sgwr = new System.IO.StringWriter();
							using (XmlTextWriter xmlwr = new XmlTextWriter(sgwr))
							{
								xmlwr.Formatting = Formatting.None;
								node.FirstChild.WriteTo(xmlwr);
							}
							parameters = sgwr.ToString();
					}
					else if (contentType == HttpContentType.HTTP_URL_ENCODED)
					{
						while (node.HasChildNodes && node.FirstChild.HasChildNodes && node.FirstChild.FirstChild.NodeType == XmlNodeType.Element)
							node = node.FirstChild;

						for (int i=0; i< node.ChildNodes.Count; i++)
						{
							if (i > 0)
								parameters += "&";
							parameters += System.Web.HttpUtility.UrlEncode(node.ChildNodes[i].LocalName, Encoding.UTF8);
							parameters += "=";
							parameters += System.Web.HttpUtility.UrlEncode(node.ChildNodes[i].InnerText, Encoding.UTF8);
						}
					}
					else
						throw new Exception ("Unsupported mime type for HTTP binding");
				}
				
				if (style == CallStyle.HTTP_GET)
				{
					if (parameters.Length > 0)
						urlOperation += ("?" + parameters);
					conn = (HttpWebRequest)WebRequest.Create(urlOperation);
					conn.Method = "GET";
					if (username.Length != 0 && password.Length !=0)
						conn.Headers["Authorization"] = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));
				}
				else // post
				{
					conn = (HttpWebRequest) WebRequest.Create(urlOperation);
					conn.ServicePoint.Expect100Continue = false;
					conn.Method = "POST";
					if (contentType == HttpContentType.HTTP_XML)
						conn.ContentType = "application/xml; charset=" + encoding;
					else if (contentType == HttpContentType.HTTP_URL_ENCODED)
						conn.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
					else
						throw new Exception("Unsupported mime type for HTTP binding");

					byte[] data = Encoding.UTF8.GetBytes(parameters);
					conn.ContentLength = data.Length;
					if (username.Length != 0 && password.Length !=0)
						conn.Headers["Authorization"] = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));

					using (System.IO.Stream rqs = conn.GetRequestStream())
						rqs.Write(data, 0, data.Length);
				}

				HttpWebResponse wre=null;
				try
				{
					wre = (HttpWebResponse)conn.GetResponse();
				}
				catch (WebException wex)
				{
					wre = (HttpWebResponse)wex.Response;
				}

				if (wre.StatusCode == HttpStatusCode.OK)
				{
					XmlDocument respDoc = new XmlDocument();
					respDoc.Load(wre.GetResponseStream());
					return respDoc;
				}
				else
					throw new Exception("Failed: " + wre.StatusCode + " " + wre.StatusDescription);
			}
			else if (style == CallStyle.SOAP_RPC_ENCODED || style == CallStyle.SOAP_DOCUMENT_LITERAL)
			{
				byte[] data = Encoding.UTF8.GetBytes(input.OuterXml);
				
				var conn = (HttpWebRequest)WebRequest.Create(endpointURL);
				conn.ServicePoint.Expect100Continue = false;
				conn.Method = "POST";
				if (soapVersion == SoapVersion.SOAP12)
				{
					if (soapAction.Length > 0)
						conn.ContentType = "application/soap+xml; action=" + soapAction;
					else
						conn.ContentType = "application/soap+xml";
				}
				else
				{
					conn.ContentType = "text/xml; charset=utf-8";
					conn.Headers["SOAPAction"] = "\"" + soapAction + "\"";
				}
				conn.ContentLength = data.Length;
				if (username.Length != 0 && password.Length !=0)
					conn.Headers["Authorization"] = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));
				
				
				using (System.IO.Stream rqs = conn.GetRequestStream())
					rqs.Write(data, 0, data.Length);
				
				WebResponse wre=null;

				try
				{
					wre = conn.GetResponse();
				}
				catch (WebException wex)
				{
					wre = wex.Response;
				}

				HttpWebResponse httpwre = (HttpWebResponse)wre;
				if (httpwre.StatusCode != HttpStatusCode.OK)
					throw new Exception("Failed: " + httpwre.StatusCode + " " + httpwre.StatusDescription);

				XmlDocument respDoc = new XmlDocument();
				respDoc.Load(wre.GetResponseStream());

				// check mustUnderstand
				XmlNodeList headers = respDoc.GetElementsByTagName("Header", soapEnvNs);
				if (headers.Count > 1)
					throw new Exception("more than one SOAPENV:Header found");
				if (headers.Count == 1)
				{
					// if header has any children that have mustUnderstand==1, throw "don' understand"
					for (XmlNode headerNode = headers[0].FirstChild; headerNode != null; headerNode = headerNode.NextSibling)
						if (headerNode.NodeType == XmlNodeType.Element)
						{
							XmlNode muAttr = headerNode.Attributes.GetNamedItem("mustUnderstand", soapEnvNs);
							if (muAttr != null && (muAttr.Value == "1" || muAttr.Value == "true"))
								throw new Exception("Cannot process messages with mustUnderstand headers");
						}
				}
				
				return respDoc;
			}
			else
				throw new Exception("Unsupported style");			
		}
	}
}
////////////////////////////////////////////////////////////////////////
//
// SummaryValueMapMapToSummary.cs
//
// This file was generated by MapForce 2021r3.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;
using Altova.TextParser;


using bookstore_com_catalog; // application.libraries

namespace Catalog
{

	public class SummaryValueMapMapToSummary : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected XmlNode m_Catalog2Instance;
		// members
		#endregion //Members


		public void Run(String Catalog2SourceFilename, string Summary2TargetFilename)
		{
			// open source streams
			using (Altova.IO.Input Catalog2Source = new Altova.IO.FileInput(Catalog2SourceFilename))
			// open target stream
			using (Altova.IO.Output Summary2Target = new Altova.IO.FileOutput(Summary2TargetFilename))
			{
				// run
				Run(Catalog2Source, Summary2Target);
			}
		}

		public void Run(Altova.IO.Input Catalog2Source, Altova.IO.Output Summary2Target)
		{
			// Open the source(s)
			WriteTrace("Loading " + Catalog2Source.Filename + "...\n");
			XmlDocument Catalog2DocSourceObject = XmlTreeOperations.LoadDocument(Catalog2Source);


			m_Catalog2Instance = Catalog2DocSourceObject;
			// Create the target

			// Execute mapping

			main mapping = new main( 
				new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_Catalog2Instance, Catalog2Source.Filename));

			Altova.Functions.Json.Write(mapping, Summary2Target, true, false, false);

			// Close the target

			// Close the Source Library
			if (runDoesCloseAll)
			{
				Catalog2Source.Close();
			}


		}
		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;

			public main(
				Altova.Mapforce.IMFNode var1_Catalog_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							current = Altova.Functions.Json.CreateObject(Altova.Functions.Json.CreateMember("summary", Altova.Functions.Core.Box(Altova.Functions.Json.CreateArray((new seq1_map(closure.var1_Catalog_Instance))))));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;

			public seq1_map(
				Altova.Mapforce.IMFNode var1_Catalog_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_map closure;
				private IEnumerator var2_group_by;
				private string var3_grouping_key;
				public Enumerator(seq1_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_group_by = (Altova.Functions.Core.GroupBy((new seq2_join(closure.var1_Catalog_Instance)), new Altova.Mapforce.MFInvoke(seq3_box.Invoke))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_group_by.MoveNext()) { state = 3; goto case 3; }
							var3_grouping_key = (Altova.Functions.Core.GroupingKey((Altova.Mapforce.Group)(var2_group_by.Current)));
							current = Altova.Functions.Json.CreateObject((new seq4_join((Altova.Mapforce.Group)(var2_group_by.Current), var3_grouping_key)));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_group_by); var2_group_by = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_group_by); var2_group_by = null;
				}
			}
		}
		class seq2_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;

			public seq2_join(
				Altova.Mapforce.IMFNode var1_Catalog_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_join closure;
				private IEnumerator var2_catalog;
				private IEnumerator var3_book;
				public Enumerator(seq2_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_catalog = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("catalog", "https://bookstore.com/catalog"), closure.var1_Catalog_Instance)).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_catalog.MoveNext()) { state = 3; goto case 3; }
							var3_book = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("book", "https://bookstore.com/catalog"), (Altova.Mapforce.IMFNode)(var2_catalog.Current))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_catalog); var2_catalog = null;
							return false;
						case 4:
							state = 4;
							if (!var3_book.MoveNext()) { state = 5; goto case 5; }
							current = var3_book.Current;
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var3_book); var3_book = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_book); var3_book = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_catalog); var2_catalog = null;
				}
			}
		}
		class seq3_box : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_item;

			public seq3_box(
				Altova.Mapforce.IMFNode var1_item
			)
			{
				this.var1_item = var1_item;
			}

			public static IEnumerable Invoke(object o)
			{
				return new seq3_box((Altova.Mapforce.IMFNode)o);
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_box closure;
				public Enumerator(seq3_box closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							current = Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("genre", "https://bookstore.com/catalog"), closure.var1_item)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq4_join : IEnumerable
		{
			private readonly Altova.Mapforce.Group var1_cur;
			private readonly string var2_grouping_key;

			public seq4_join(
				Altova.Mapforce.Group var1_cur,
				string var2_grouping_key
			)
			{
				this.var1_cur = var1_cur;
				this.var2_grouping_key = var2_grouping_key;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq4_join closure;
				private IEnumerator var3_create_member;
				private IEnumerator var4_create_member;
				private IEnumerator var5_create_member;
				public Enumerator(seq4_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_create_member = (Altova.Functions.Json.CreateMember("genre", Altova.Functions.Core.Box(Altova.Functions.Json.CreateString(closure.var2_grouping_key)))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_create_member.MoveNext()) { state = 3; goto case 3; }
							current = var3_create_member.Current;
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var3_create_member); var3_create_member = null;
							var4_create_member = (Altova.Functions.Json.CreateMember("count", Altova.Functions.Core.Box(Altova.Functions.Json.CreateNumber(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.Functions.Core.Count((new seq5_join(closure.var1_cur))))))))).GetEnumerator();
							goto case 5;
						case 5:
							state = 5;
							if (!var4_create_member.MoveNext()) { state = 6; goto case 6; }
							current = var4_create_member.Current;
							pos++;
							return true;
						case 6:
							state = 8;
							Altova.Mapforce.MFEnumerator.Dispose(var4_create_member); var4_create_member = null;
							var5_create_member = (Altova.Functions.Json.CreateMember("shelf", Altova.Functions.Core.Box(Altova.Functions.Json.CreateString(vmf.vmf1_inputtoresult.Eval(closure.var2_grouping_key))))).GetEnumerator();
							goto case 8;
						case 8:
							state = 8;
							if (!var5_create_member.MoveNext()) { state = 9; goto case 9; }
							current = var5_create_member.Current;
							pos++;
							return true;
						case 9:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var5_create_member); var5_create_member = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_create_member); var3_create_member = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_create_member); var4_create_member = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_create_member); var5_create_member = null;
				}
			}
		}
		class seq5_join : IEnumerable
		{
			private readonly Altova.Mapforce.Group var1_cur;

			public seq5_join(
				Altova.Mapforce.Group var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq5_join closure;
				private IEnumerator var2_group_items;
				public Enumerator(seq5_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_group_items = (Altova.Functions.Core.GroupItems(closure.var1_cur)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_group_items.MoveNext()) { state = 3; goto case 3; }
							current = (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("genre", "https://bookstore.com/catalog"), (Altova.Mapforce.IMFNode)(var2_group_items.Current)));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_group_items); var2_group_items = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_group_items); var2_group_items = null;
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;

			public Outer(
				Altova.Mapforce.IMFNode var1_Catalog_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var2_box;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_box = ((new main(closure.var1_Catalog_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_box.MoveNext()) { state = 3; goto case 3; }
							current = var2_box.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_box); var2_box = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_box); var2_box = null;
				}
			}
		}

	}
}

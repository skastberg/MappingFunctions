////////////////////////////////////////////////////////////////////////
//
// SummaryLookupMapToCatalog_Summary_Schema.cs
//
// This file was generated by MapForce 2021r3.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;
using Altova.TextParser;


using bookstore_com_catalog; // application.libraries

namespace Catalog
{

	public class SummaryLookupMapToCatalog_Summary_Schema : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected XmlNode m_Catalog3Instance;
		protected Altova.Json.Document m_Shelfs2Instance;
		// members
		#endregion //Members


		public void Run(String Catalog3SourceFilename, String Shelfs2SourceFilename, string Catalog_Summary_SchemaTargetFilename)
		{
			// open source streams
			using (Altova.IO.Input Catalog3Source = new Altova.IO.FileInput(Catalog3SourceFilename))
			using (Altova.IO.Input Shelfs2Source = new Altova.IO.FileInput(Shelfs2SourceFilename))
			// open target stream
			using (Altova.IO.Output Catalog_Summary_SchemaTarget = new Altova.IO.FileOutput(Catalog_Summary_SchemaTargetFilename))
			{
				// run
				Run(Catalog3Source, Shelfs2Source, Catalog_Summary_SchemaTarget);
			}
		}

		public void Run(Altova.IO.Input Catalog3Source, Altova.IO.Input Shelfs2Source, Altova.IO.Output Catalog_Summary_SchemaTarget)
		{
			// Open the source(s)
			WriteTrace("Loading " + Catalog3Source.Filename + "...\n");
			XmlDocument Catalog3DocSourceObject = XmlTreeOperations.LoadDocument(Catalog3Source);


			m_Catalog3Instance = Catalog3DocSourceObject;
			m_Shelfs2Instance = Altova.Functions.Json.Load(Shelfs2Source, Catalog.MapForceJsonLibs.Shelfs.Schemas, false, false);
			// Create the target

			// Execute mapping

			main mapping = new main( 
				new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_Catalog3Instance, Catalog3Source.Filename), 
				m_Shelfs2Instance);

			Altova.Functions.Json.Write(mapping, Catalog_Summary_SchemaTarget, true, false, false);

			// Close the target

			// Close the Source Library
			if (runDoesCloseAll)
			{
				Catalog3Source.Close();
			}


		}
		class main : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;
			private readonly Altova.Mapforce.IMFNode var2_Shelfs_Instance;

			public main(
				Altova.Mapforce.IMFNode var1_Catalog_Instance,
				Altova.Mapforce.IMFNode var2_Shelfs_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
				this.var2_Shelfs_Instance = var2_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 2;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 2:
							state = 0;
							current = Altova.Functions.Json.CreateObject(Altova.Functions.Json.CreateMember("summary", (new seq1_map(closure.var1_Catalog_Instance, closure.var2_Shelfs_Instance))));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;
			private readonly Altova.Mapforce.IMFNode var2_Shelfs_Instance;

			public seq1_map(
				Altova.Mapforce.IMFNode var1_Catalog_Instance,
				Altova.Mapforce.IMFNode var2_Shelfs_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
				this.var2_Shelfs_Instance = var2_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_map closure;
				private IEnumerator var3_catalog;
				public Enumerator(seq1_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_catalog = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("catalog", "https://bookstore.com/catalog"), closure.var1_Catalog_Instance)).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_catalog.MoveNext()) { state = 3; goto case 3; }
							current = Altova.Functions.Json.CreateArray((new seq2_map((Altova.Mapforce.IMFNode)(var3_catalog.Current), closure.var2_Shelfs_Instance)));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_catalog); var3_catalog = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_catalog); var3_catalog = null;
				}
			}
		}
		class seq2_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;
			private readonly Altova.Mapforce.IMFNode var2_Shelfs_Instance;

			public seq2_map(
				Altova.Mapforce.IMFNode var1_cur,
				Altova.Mapforce.IMFNode var2_Shelfs_Instance
			)
			{
				this.var1_cur = var1_cur;
				this.var2_Shelfs_Instance = var2_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_map closure;
				private IEnumerator var3_group_by;
				private System.Collections.IEnumerable var4_group_items;
				public Enumerator(seq2_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_group_by = (Altova.Functions.Core.GroupBy(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("book", "https://bookstore.com/catalog"), closure.var1_cur), new Altova.Mapforce.MFInvoke(seq3_box.Invoke))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_group_by.MoveNext()) { state = 3; goto case 3; }
							var4_group_items = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.GroupItems((Altova.Mapforce.Group)(var3_group_by.Current)));
							current = Altova.Functions.Json.CreateObject((new seq4_join(var4_group_items, (Altova.Mapforce.Group)(var3_group_by.Current), closure.var2_Shelfs_Instance)));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_group_by); var3_group_by = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_group_by); var3_group_by = null;
				}
			}
		}
		class seq3_box : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_item;

			public seq3_box(
				Altova.Mapforce.IMFNode var1_item
			)
			{
				this.var1_item = var1_item;
			}

			public static IEnumerable Invoke(object o)
			{
				return new seq3_box((Altova.Mapforce.IMFNode)o);
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_box closure;
				public Enumerator(seq3_box closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							current = Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("genre", "https://bookstore.com/catalog"), closure.var1_item)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq4_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_group_items;
			private readonly Altova.Mapforce.Group var2_cur;
			private readonly Altova.Mapforce.IMFNode var3_Shelfs_Instance;

			public seq4_join(
				System.Collections.IEnumerable var1_group_items,
				Altova.Mapforce.Group var2_cur,
				Altova.Mapforce.IMFNode var3_Shelfs_Instance
			)
			{
				this.var1_group_items = var1_group_items;
				this.var2_cur = var2_cur;
				this.var3_Shelfs_Instance = var3_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq4_join closure;
				private IEnumerator var4_create_member;
				private IEnumerator var5_create_member;
				private IEnumerator var6_create_member;
				public Enumerator(seq4_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var4_create_member = (Altova.Functions.Json.CreateMember("genre", Altova.Functions.Core.Box(Altova.Functions.Json.CreateString(Altova.Functions.Core.GroupingKey(closure.var2_cur))))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var4_create_member.MoveNext()) { state = 3; goto case 3; }
							current = var4_create_member.Current;
							pos++;
							return true;
						case 3:
							state = 5;
							Altova.Mapforce.MFEnumerator.Dispose(var4_create_member); var4_create_member = null;
							var5_create_member = (Altova.Functions.Json.CreateMember("count", Altova.Functions.Core.Box(Altova.Functions.Json.CreateNumber(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.Functions.Core.Count((new seq5_join(closure.var1_group_items))))))))).GetEnumerator();
							goto case 5;
						case 5:
							state = 5;
							if (!var5_create_member.MoveNext()) { state = 6; goto case 6; }
							current = var5_create_member.Current;
							pos++;
							return true;
						case 6:
							state = 8;
							Altova.Mapforce.MFEnumerator.Dispose(var5_create_member); var5_create_member = null;
							var6_create_member = (Altova.Functions.Json.CreateMember("shelf", (new seq6_join(closure.var1_group_items, closure.var3_Shelfs_Instance)))).GetEnumerator();
							goto case 8;
						case 8:
							state = 8;
							if (!var6_create_member.MoveNext()) { state = 9; goto case 9; }
							current = var6_create_member.Current;
							pos++;
							return true;
						case 9:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var6_create_member); var6_create_member = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_create_member); var4_create_member = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_create_member); var5_create_member = null;
					Altova.Mapforce.MFEnumerator.Dispose(var6_create_member); var6_create_member = null;
				}
			}
		}
		class seq5_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_group_items;

			public seq5_join(
				System.Collections.IEnumerable var1_group_items
			)
			{
				this.var1_group_items = var1_group_items;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq5_join closure;
				private IEnumerator var2_group_items;
				public Enumerator(seq5_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_group_items = (closure.var1_group_items).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_group_items.MoveNext()) { state = 3; goto case 3; }
							current = (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("genre", "https://bookstore.com/catalog"), (Altova.Mapforce.IMFNode)(var2_group_items.Current)));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_group_items); var2_group_items = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_group_items); var2_group_items = null;
				}
			}
		}
		class seq6_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_group_items;
			private readonly Altova.Mapforce.IMFNode var2_Shelfs_Instance;

			public seq6_join(
				System.Collections.IEnumerable var1_group_items,
				Altova.Mapforce.IMFNode var2_Shelfs_Instance
			)
			{
				this.var1_group_items = var1_group_items;
				this.var2_Shelfs_Instance = var2_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq6_join closure;
				private IEnumerator var3_as_array;
				private IEnumerator var4_join;
				private IEnumerator var5_filter;
				public Enumerator(seq6_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_as_array = (Altova.Functions.Json.AsArray(Altova.Functions.Json.RootValue(closure.var2_Shelfs_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_as_array.MoveNext()) { state = 3; goto case 3; }
							var4_join = ((new seq7_join((Altova.Mapforce.IMFNode)(var3_as_array.Current)))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_as_array); var3_as_array = null;
							return false;
						case 4:
							state = 6;
							if (!var4_join.MoveNext()) { state = 5; goto case 5; }
							var5_filter = ((new seq8_join((Altova.Mapforce.IMFNode)(var4_join.Current)))).GetEnumerator();
							goto case 6;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_join); var4_join = null;
							goto case 2;
						case 6:
							state = 6;
							if (!var5_filter.MoveNext()) { state = 7; goto case 7; }
							if (!((bool)Altova.Functions.Core.First((new seq10_CoreAny((new seq9_join(closure.var1_group_items, (Altova.Mapforce.IMFNode)(var4_join.Current)))))))) { state = 6; goto case 6;  }
							current = Altova.Functions.Json.CreateString((string)(var5_filter.Current));
							pos++;
							return true;
						case 7:
							state = 4;
							Altova.Mapforce.MFEnumerator.Dispose(var5_filter); var5_filter = null;
							goto case 4;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var5_filter); var5_filter = null;
					Altova.Mapforce.MFEnumerator.Dispose(var4_join); var4_join = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_as_array); var3_as_array = null;
				}
			}
		}
		class seq7_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq7_join(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq7_join closure;
				private IEnumerator var2_array_items;
				private IEnumerator var3_as_object;
				public Enumerator(seq7_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_array_items = (Altova.Functions.Json.GetArrayItems(closure.var1_cur)).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_array_items.MoveNext()) { state = 3; goto case 3; }
							var3_as_object = (Altova.Functions.Json.AsObject((Altova.Mapforce.IMFNode)(var2_array_items.Current))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_array_items); var2_array_items = null;
							return false;
						case 4:
							state = 4;
							if (!var3_as_object.MoveNext()) { state = 5; goto case 5; }
							current = var3_as_object.Current;
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var3_as_object); var3_as_object = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_as_object); var3_as_object = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_array_items); var2_array_items = null;
				}
			}
		}
		class seq8_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_cur;

			public seq8_join(
				Altova.Mapforce.IMFNode var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq8_join closure;
				private IEnumerator var2_object_member_by_name;
				private IEnumerator var3_as_string;
				public Enumerator(seq8_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_object_member_by_name = (Altova.Functions.Json.GetMemberByName(closure.var1_cur, "shelf")).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_object_member_by_name.MoveNext()) { state = 3; goto case 3; }
							var3_as_string = (Altova.Functions.Json.AsString(Altova.Functions.Json.GetMemberValue((Altova.Mapforce.IMFNode)(var2_object_member_by_name.Current)))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_object_member_by_name); var2_object_member_by_name = null;
							return false;
						case 4:
							state = 4;
							if (!var3_as_string.MoveNext()) { state = 5; goto case 5; }
							current = var3_as_string.Current;
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var3_as_string); var3_as_string = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_as_string); var3_as_string = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_object_member_by_name); var2_object_member_by_name = null;
				}
			}
		}
		class seq9_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_group_items;
			private readonly Altova.Mapforce.IMFNode var2_cur;

			public seq9_join(
				System.Collections.IEnumerable var1_group_items,
				Altova.Mapforce.IMFNode var2_cur
			)
			{
				this.var1_group_items = var1_group_items;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq9_join closure;
				private IEnumerator var3_group_items;
				private Altova.Mapforce.IMFNode var4_genre;
				private IEnumerator var5_object_member_by_name;
				private IEnumerator var6_as_string;
				public Enumerator(seq9_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_group_items = (closure.var1_group_items).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_group_items.MoveNext()) { state = 3; goto case 3; }
							var4_genre = ((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("genre", "https://bookstore.com/catalog"), (Altova.Mapforce.IMFNode)(var3_group_items.Current))));
							var5_object_member_by_name = (Altova.Functions.Json.GetMemberByName(closure.var2_cur, "category")).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_group_items); var3_group_items = null;
							return false;
						case 4:
							state = 6;
							if (!var5_object_member_by_name.MoveNext()) { state = 5; goto case 5; }
							var6_as_string = (Altova.Functions.Json.AsString(Altova.Functions.Json.GetMemberValue((Altova.Mapforce.IMFNode)(var5_object_member_by_name.Current)))).GetEnumerator();
							goto case 6;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var5_object_member_by_name); var5_object_member_by_name = null;
							goto case 2;
						case 6:
							state = 6;
							if (!var6_as_string.MoveNext()) { state = 7; goto case 7; }
							current = (Altova.CoreTypes.NodeToString(var4_genre)) == ((string)(var6_as_string.Current));
							pos++;
							return true;
						case 7:
							state = 4;
							Altova.Mapforce.MFEnumerator.Dispose(var6_as_string); var6_as_string = null;
							goto case 4;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var6_as_string); var6_as_string = null;
					Altova.Mapforce.MFEnumerator.Dispose(var5_object_member_by_name); var5_object_member_by_name = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_group_items); var3_group_items = null;
				}
			}
		}
		class seq10_CoreAny : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_sequence;

			public seq10_CoreAny(
				System.Collections.IEnumerable var1_sequence
			)
			{
				this.var1_sequence = var1_sequence;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq10_CoreAny closure;
				private IEnumerator var2_enum;
				public Enumerator(seq10_CoreAny closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_enum = (closure.var1_sequence).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_enum.MoveNext()) { state = 3; goto case 3; }
							if (!((bool)(var2_enum.Current))) { state = 2; goto case 2;  }
							current = Altova.CoreTypes.ParseBoolean("true");
							pos++;
							return true;
						case 3:
							state = 4;
							current = Altova.CoreTypes.ParseBoolean("false");
							pos++;
							return true;
						case 4:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_Catalog_Instance;
			private readonly Altova.Mapforce.IMFNode var2_Shelfs_Instance;

			public Outer(
				Altova.Mapforce.IMFNode var1_Catalog_Instance,
				Altova.Mapforce.IMFNode var2_Shelfs_Instance
			)
			{
				this.var1_Catalog_Instance = var1_Catalog_Instance;
				this.var2_Shelfs_Instance = var2_Shelfs_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var3_box;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_box = ((new main(closure.var1_Catalog_Instance, closure.var2_Shelfs_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_box.MoveNext()) { state = 3; goto case 3; }
							current = var3_box.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_box); var3_box = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_box); var3_box = null;
				}
			}
		}

	}
}
